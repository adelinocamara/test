<%
  const LOCAL_PAGE = Object.freeze({
    title: LOCAL_STRINGS.sign_up,
    description: {
      en: '',
      es: ''
    },
    keywords: {
      en: '',
      es: ''
    },
    robots: 'index, follow',
    canonical: '',
    og_url: '',
    og_site_name: {
      en: '',
      es: ''
    },
    og_image: '',
    twitter_card: {
      en: '',
      es: ''
    },
    stylesheets: [
      "/profile/res/src/assets/css/light/authentication/auth-boxed.css",
      "/profile/res/src/assets/css/dark/authentication/auth-boxed.css"
    ]
  })
%>
<%- include(`./header-page-everyone`, {
  LOCAL_PAGE
}) -%>
<!--  BEGIN *** CONTENT ***  -->
<form id="frmMain" enctype="multipart/form-data">
  <input id="hid_email_phone" name="hid_email_phone" type="hidden" value="" />
  <input id="hid_doctrine" name="hid_doctrine" type="hidden" value="" />
  <div class="auth-container d-flex">
    <div class="container mx-auto align-self-center">
      <div class="row">
        <div class="col-xxl-4 col-xl-5 col-lg-5 col-md-8 col-12 d-flex flex-column align-self-center mx-auto">
          <div class="card mt-3 mb-3">
            <div class="card-body">
              <div class="row">
                <div class="col-md-12 mb-3">
                  <h2><%=LOCAL_STRINGS.sign_up[req.session.language]%></h2>
                </div>
                <div class="col-md-12 mb-4">
                  <label for="txtFirstName"><%=LOCAL_STRINGS.first_name[req.session.language]%></label>
                  <input id="txtFirstName" name="txtFirstName" type="text" class="form-control">
                  <div id="msgFirstName"></div>
                </div>
                <div class="col-md-12 mb-4">
                  <label for="txtLastName"><%=LOCAL_STRINGS.last_name[req.session.language]%></label>
                  <input id="txtLastName" name="txtLastName" type="text" class="form-control">
                  <div id="msgLastName"></div>
                </div>
                <div class="col-md-12 mb-4">
                  <label for="txtUserName"><%=LOCAL_STRINGS.user_name[req.session.language]%><i id="icoUserName" class="fa fa-spinner fa-spin d-none"></i></label>
                  <input id="txtUserName" name="txtUserName" type="text" class="form-control">
                  <div id="msgUserName"></div>
                </div>
                <div class="col-md-12 mb-4">
                  <label for="txtEmail"><%=LOCAL_STRINGS.email[req.session.language]%><i id="icoEmail" class="fa fa-spinner fa-spin d-none"></i></label>
                  <input id="txtEmail" name="txtEmail" type="text" class="form-control">
                  <div id="msgEmail"></div>
                </div>
                <div class="row mb-3">
                  <label for="selCountriesOfResidence"><%=LOCAL_STRINGS.country_of_residence[req.session.language]%></label>
                  <div class="input-group">
                    <span class="input-group-text" >
                      <img id="imgCountryFlag" src="/profile/res/src/assets/img/flag/flag.svg" width="18px" title="flag" alt="flag">
                    </span>
                    <select id="selCountriesOfResidence" name="selCountriesOfResidence" class="custom-select">
                      <option value="-1,flag.svg,+">-- <%=LOCAL_STRINGS.select_country[req.session.language]%> --</option>
                      <%
                        const country_language = `country_${req.session.language}`;
                        for (var i = 0; i < countries.length; i++) {
                      %>
                          <option value="<%=countries[i].id_country%>,<%=countries[i].img_flag%>,<%=countries[i].phone_code%>"
                            <%
                              if (countries[i].id_country ==  req.session.id_country) {
                            %>
                              selected
                            <%}%> >
                            <%=countries[i][country_language]%>
                          </option>
                      <%
                        }
                      %>
                    </select>
                    <div id="msgCountries"></div>
                  </div>
                </div>
                <div class="col-md-6 mb-4">
                  <label for="txtCellPhone"><%=LOCAL_STRINGS.cell_phone[req.session.language]%> <i id="icoCellPhone" class="fa fa-spinner fa-spin d-none"></i></label>
                  <div class="input-group">
                    <div class="input-group-prepend">
                      <div id="preCellPhone" class="input-group-text" style="height: 100%;">+</div>
                    </div>
                    <input id="txtCellPhone" name="txtCellPhone" type="text" class="form-control">
                    <div id="msgCellPhone"></div>
                  </div>
                </div>
                <div class="col-md-12 mb-4">
                  <label for="txtPassword" class="form-label"><%=LOCAL_STRINGS.password[req.session.language]%></label>
                  <div class="input-group">
                    <input id="txtPassword" name="txtPassword" type="password" class="form-control">
                    <div class="input-group-append">
                      <button id="btnShowPassword" class="btn btn-outline-secondary" type="button"><i class="fa fa-eye"></i></button>
                    </div>
                    <div id="msgPassword"></div>
                  </div>
                </div>
                <div class="col-md-12 mb-4">
                  <label><%=LOCAL_STRINGS.gender[req.session.language]%></label>
                  <div class="form-check">
                    <div class="form-check form-check-success form-check-inline">
                      <input id="radFemale" name="grpGender" type="radio" class="form-check-input" value="female">
                      <label class="form-check-label" for="radFemale"><%=LOCAL_STRINGS.female[req.session.language]%></label><br>
                    </div>
                    <div class="form-check form-check-info form-check-inline">
                      <input id="radMale" name="grpGender" type="radio" class="form-check-input" value="male">
                      <label class="form-check-label" for="radMale"><%=LOCAL_STRINGS.male[req.session.language]%></label>
                    </div>
                    <div id="msgGender"></div>
                  </div>
                </div>
                <div class="col-md-12 mb-4">
                  <label for="txtDateOfBirth"><%=LOCAL_STRINGS.date_of_birth[req.session.language]%></label>
                  <input id="txtDateOfBirth" name="txtDateOfBirth" type="text" class="form-control">
                  <div id="msgDateOfBirth"></div>
                  <small class="form-text text-muted"><%=LOCAL_STRINGS.date_of_format_info[req.session.language]%> <%=req.session.date_info%></small>
                </div>
                <div class="row mb-3">
                  <label for="selNationality"><%=LOCAL_STRINGS.nationality[req.session.language]%></label>
                  <div class="input-group">
                    <span class="input-group-text" >
                      <img id="imgNationalityFlag" src="/profile/res/src/assets/img/flag/flag.svg" width="18px" title="flag" alt="flag">
                    </span>
                    <select id="selNationality" name="selNationality" class="custom-select">
                      <option value="-1,flag.svg">-- <%=LOCAL_STRINGS.select_nationality[req.session.language]%> --</option>
                      <%
                        const nationality_language = `country_${req.session.language}`;
                        for (var i3 = 0; i3 < countries.length; i3++) {
                      %>
                        <option value="<%=countries[i3].id_country%>,<%=countries[i3].img_flag%>"><%=countries[i3][nationality_language]%></option>
                      <%
                        }
                      %>
                    </select>
                    <div id="msgNationality"></div>
                  </div>
                </div>
                <div class="row mb-3">
                  <label for="selDoctrine"><%=LOCAL_STRINGS.doctrines[req.session.language]%></label>
                  <div class="input-group">
                    <select id="selDoctrine" name="selDoctrine" class="custom-select">
                      <option value="-1">-- <%=LOCAL_STRINGS.select_doctrine[req.session.language]%> --</option>
                      <%
                        const doctrine_language = `doctrine_${req.session.language}`;
                        for (var i2 = 0; i2 < doctrines.length; i2++) {
                      %>
                          <option value="<%=doctrines[i2].id_doctrine%>"><%=doctrines[i2][doctrine_language]%></option>
                      <%
                        }
                      %>
                    </select>
                    <div id="msgDoctrines"></div>
                  </div>
                </div>
                <div class="col-12 mb-4">
                  <div class="">
                    <div class="seperator">
                      <hr>
                    </div>
                  </div>
                </div>
                <div class="col-md-12 mb-4">
                  <div class="form-check">
                    <input id="chbAgree" name="chbAgree" type="checkbox" class="form-check-input">
                    <label class="form-check-label" for="chbAgree">
                      <%=LOCAL_STRINGS.registration_i_agree[req.session.language]%>
                      <a href="/profile/documents/users/registration/terms-of-use" class="text-primary" title="<%=LOCAL_STRINGS.terms_of_use[req.session.language]%>">
                        <%=LOCAL_STRINGS.terms_of_use[req.session.language]%>
                      </a>
                      <%=LOCAL_STRINGS.and[req.session.language]%>
                      <a href="/profile/documents/users/registration/privacy-policies" class="text-primary"><%=LOCAL_STRINGS.privacy_policies[req.session.language]%></a>
                      </label>
                    <small class="form-text text-muted">
                      <%=LOCAL_STRINGS.user_registration_declare_accept[req.session.language]%>
                      <a href="/profile/documents/users/registration/terms-of-use" class="text-primary" title="<%=LOCAL_STRINGS.terms_of_use[req.session.language]%>">
                        <%=LOCAL_STRINGS.terms_of_use[req.session.language]%>
                      </a>
                      <%=LOCAL_STRINGS.and[req.session.language]%>
                      <a href="/profile/documents/users/registration/privacy-policies" class="text-primary"><%=LOCAL_STRINGS.privacy_policies[req.session.language]%></a>
                    </small>
                    <div id="msgAgree"></div>
                  </div>
                </div>
                <div class="col-12">
                  <div class="mb-3">
                    <div class="form-check form-check-primary form-check-inline">
                    </div>
                  </div>
                </div>
                <div class="col-md-12 mb-4">
                  <button id="btnSignUp" name="btnSignUp" class="btn btn-secondary w-100" type="button">
                    <span>
                      <i id="icoSignUp" class="fa fa-spinner fa-spin d-none"></i> <%=LOCAL_STRINGS.sign_up[req.session.language]%>
                    </span>
                  </button>
                </div>
                <div class="col-12 mb-4">
                  <div class="">
                    <div class="seperator">
                      <hr>
                    </div>
                  </div>
                </div>
                <div class="col-12">
                  <div class="text-center">
                    <p class="mb-0">
                      <a href="/profile/forgot-password" class="text-warning">
                      <%=LOCAL_STRINGS.forgot_password[req.session.language]%></a>
                    </p>
                    <p class="mb-0">
                      <%=LOCAL_STRINGS.already_registered[req.session.language]%>
                      <a href="/profile/login" class="text-warning">
                      <%=LOCAL_STRINGS.login[req.session.language]%></a>
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</form>
<!--  END *** CONTENT ***  -->
<%- include(`./footer-page-everyone`) -%>
<!--  BEGIN *** SCRIPTS ***  -->
  <script>
    Array.prototype.removeByValue = function (val) {
      for (var i = 0; i < this.length; i++) {
        if (this[i] === val) {
          this.splice(i, 1);
          i--;
        }
      }
      return this;
    }
    console.log('req.session.id_country: ','<%=req.session.id_country%>')
    const txtFirstName = new SLInput('txtFirstName', {
      messages: {
        msgDiv: 'msgFirstName',
        show: showMsg,
        hide: hideMsg
      },
      required: '<%=LOCAL_STRINGS.required_first_name[req.session.language]%>',
      min_characters: {
        error: '<%=LOCAL_STRINGS.mincharacters_first_name[req.session.language]%>',
        min_number: 2
      },
      max_characters: {
        error: '<%=LOCAL_STRINGS.maxcharacters_first_name[req.session.language]%>',
        max_number: 30
      }
    })
    const txtLastName = new SLInput('txtLastName', {
      messages: {
        msgDiv: 'msgLastName',
        show: showMsg,
        hide: hideMsg
      },
      required: '<%=LOCAL_STRINGS.required_last_name[req.session.language]%>',
      min_characters: {
        error: '<%=LOCAL_STRINGS.mincharacters_last_name[req.session.language]%>',
        min_number: 2
      },
      max_characters: {
        error: '<%=LOCAL_STRINGS.maxcharacters_last_name[req.session.language]%>',
        max_number: 30
      }
    })
    const icoUserName = document.getElementById('icoUserName');
    const txtUserName = new SLInput('txtUserName', {
      messages: {
        msgDiv: 'msgUserName',
        show: showMsg,
        hide: hideMsg
      },
      required: '<%=LOCAL_STRINGS.required_user_name[req.session.language]%>',
      min_characters: {
        error: '<%=LOCAL_STRINGS.mincharacters_user_name[req.session.language]%>',
        min_number: 8
      },
      max_characters: {
        error: '<%=LOCAL_STRINGS.maxcharacters_user_name[req.session.language]%>',
        max_number: 30
      }
    })
    txtUserName.element.addEventListener('focus', async () => {
      try {
        if (txtUserName.element.value == '' && txtFirstName.IsValid() && txtLastName.IsValid()) {
          const sFirstName = txtFirstName.element.value.toLowerCase().substr(0, 10);
          const sLastName = txtLastName.element.value.toLowerCase().substr(0, 10);
          let sUserName = sFirstName + '_' + sLastName;
          if (sUserName.length >= 8) {
            icoUserName.classList.remove('d-none');
            const oFetch = await fetch('/profile/generated-user-name', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                user_name: sUserName
              })
            });
            let oValue = await oFetch.json();
            if (oValue.payload.user_name?.length > 0) {
              txtUserName.element.value = oValue.payload.user_name;
            }
            icoUserName.classList.add('d-none');
          }
        }
      } catch (err) {
        console.error(err);
      }
    });
    txtUserName.BlurAction(() => {
      return new Promise(async (resolve, reject) => {
        try {
          var sUserName = txtUserName.element.value;
          txtUserName.CustomErrorMessage('');
          if (txtUserName.IsValid()) {
            icoUserName.classList.remove('d-none');
            const oFetch = await fetch('/profile/is-existent-user-name', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                user_name: sUserName
              })
            });
            const oValue = await oFetch.json();
            if (oValue.payload.registered == true) {
              if (oValue.message.code == 'user_name_already_registered') {
                txtUserName.CustomErrorMessage(oValue.message['<%=req.session.language%>']);
              }
            }
            icoUserName.classList.add('d-none');
          }
          resolve(sUserName);
        } catch (err) {
          reject(err);
        }
      });
    });
    const icoEmail = document.getElementById('icoEmail');
    const txtEmail = new SLInput('txtEmail', {
        messages: {
        msgDiv: 'msgEmail',
        show: showMsg,
        hide: hideMsg
      },
      email: '<%=LOCAL_STRINGS.email_fail[req.session.language]%>',
      max_characters: {
        error: '<%=LOCAL_STRINGS.maxcharacters_email[req.session.language]%>',
        max_number: 255
      }
    });
    txtEmail.BlurAction(() => {
      return new Promise(async (resolve, reject) => {
        try {
          const sEmail = txtEmail.element.value;
          const oEmail = txtEmail.GetEmail();
          txtEmail.CustomErrorMessage('');
          if (!oEmail.error) {
            icoEmail.classList.remove('d-none');
            const oFetch = await fetch('/profile/is-existent-user-email', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                email: oEmail.email
              })
            });
            const oValue = await oFetch.json();
            if (oValue.payload.registered == true) {
              if (oValue.message.code == 'email_already_registered') {
                txtEmail.CustomErrorMessage(oValue.message['<%=req.session.language%>']);
                sEmail = oEmail.email;
              }
            }
            icoEmail.classList.add('d-none');
          }
          resolve(sEmail);
        } catch (err) {
          icoEmail.classList.add('d-none');
          reject(err);
        }
      });
    });
    const imgCountryFlag = document.getElementById('imgCountryFlag');
    const imgNationalityFlag = document.getElementById('imgNationalityFlag');
    const selCountriesOfResidence = new SLSelect('selCountriesOfResidence', {
      messages: {
        msgDiv: 'msgCountries',
        show: showMsg,
        hide: hideMsg
      },
      required: {
        error: '<%=LOCAL_STRINGS.required_country_of_residence[req.session.language]%>',
        reference_value: '-1,flag.svg,+'
      }
    });
    const selNationality = new SLSelect('selNationality', {
      messages: {
        msgDiv: 'msgNationality',
        show: showMsg,
        hide: hideMsg
      },
      required: {
        error: '<%=LOCAL_STRINGS.required_nationality[req.session.language]%>',
        reference_value: '-1,flag.svg'
      }
    });
    const asNationalityFlag = selNationality.element.value.split(',');
    console.log(asNationalityFlag);
    imgNationalityFlag.src = `/profile/res/src/assets/img/flag/${asNationalityFlag[1]}`;
    selCountriesOfResidence.element.addEventListener('change', () => {
      const asCountry = selCountriesOfResidence.element.value.split(',');
      const sIdCountry = asCountry[0];
      const sFlag = asCountry[1];
      const sPhoneCode = asCountry[2];
      console.log("sIdCountry:", asCountry[0])
      console.log("sFlag:", asCountry[1])
      console.log("sPhoneCode:", asCountry[2])
      preCellPhone.innerHTML = sPhoneCode;
      imgCountryFlag.src = `/profile/res/src/assets/img/flag/${sFlag}`;
    });
    selNationality.element.addEventListener('change', () => {
      const asNationality = selNationality.element.value.split(',');
      const sIdNationality = asNationality[0];
      const sNationalityFlag = asNationality[1];
      console.log("sIdCountry:", asNationality[0])
      console.log("sNationalityFlag:", asNationality[1])
      imgNationalityFlag.src = `/profile/res/src/assets/img/flag/${sNationalityFlag}`;
    });
    const icoCellPhone = document.getElementById('icoCellPhone');
    const preCellPhone = document.getElementById('preCellPhone');
    const txtCellPhone = new SLInput('txtCellPhone', {
      messages: {
        msgDiv: 'msgCellPhone',
        show: showMsg,
        hide: hideMsg
      },
      only_valid_chars: '0123456789',
      min_characters: {
        error: '<%=LOCAL_STRINGS.mincharacters_cell_phone[req.session.language]%>',
        min_number: 10
      },
      max_characters: {
        error: '<%=LOCAL_STRINGS.maxcharacters_cell_phone[req.session.language]%>',
        max_number: 16
      }
    });
    const asCountryFlag = selCountriesOfResidence.element.value.split(',');
    console.log(asCountryFlag);
    console.log("sPhoneCode:", asCountryFlag[2])
    imgCountryFlag.src = `/profile/res/src/assets/img/flag/${asCountryFlag[1]}`;
    preCellPhone.innerHTML = asCountryFlag[2];
    const selDoctrine = new SLSelect('selDoctrine', {
      messages: {
        msgDiv: 'msgDoctrines',
        show: showMsg,
        hide: hideMsg
      },
      required: {
        error: '<%=LOCAL_STRINGS.required_doctrine[language]%>',
        reference_value: '-1'
      }
    });
    selDoctrine.element.addEventListener('change', () => {
      const sIdDoctrine = selDoctrine.element.value;
    });
    txtCellPhone.BlurAction(() => {
      return new Promise(async (resolve, reject) => {
        try {
          const sCellPhone = txtCellPhone.element.value;
          txtCellPhone.CustomErrorMessage('');
          if (sCellPhone != '' && preCellPhone.innerHTML != '+' && txtCellPhone.IsValid()) {
            icoCellPhone.classList.remove('d-none');
            const oFetch = await fetch('/profile/is-existent-user-cell-phone', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                cell_phone: preCellPhone.innerHTML + sCellPhone
              })
            });
            const oValue = await oFetch.json();
            if (oValue.payload.registered == true) {
              if (oValue.message.code == 'cell_phone_already_registered') {
                txtCellPhone.CustomErrorMessage(oValue.message['<%=req.session.language%>']);
              }
            }
            icoCellPhone.classList.add('d-none');
          }
          resolve(sCellPhone);
        } catch (err) {
          reject(err);
        }
      });
    });
    const txtPassword = new SLInput('txtPassword', {
      messages: {
        msgDiv: 'msgPassword',
        show: showMsg,
        hide: hideMsg
      },
      required: '<%=LOCAL_STRINGS.required_password[req.session.language]%>',
      min_characters: {
        error: '<%=LOCAL_STRINGS.mincharacters_password[req.session.language]%>',
        min_number: 8
      },
      max_characters: {
        error: '<%=LOCAL_STRINGS.maxcharacters_password[req.session.language]%>',
        max_number: 25
      }
    })
    txtPassword.KeyAction(() => {
      return new Promise(async (resolve, reject) => {
        try {
          const sPassword = txtPassword.element.value;
          let sMessage = '';
          txtPassword.CustomErrorMessage('');
          if (sPassword.length < 8) {
            sMessage += '<br>* <%=LOCAL_STRINGS.mincharacters_password[req.session.language]%>';
          }
          if (SLGetNumberCharsOccur(sPassword, 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZ') == 0) {
            sMessage += '<br>* <%=LOCAL_STRINGS.missing_uppercase[req.session.language]%>';
          }
          if (SLGetNumberCharsOccur(sPassword, '0123456789') == 0) {
            sMessage += '<br>* <%=LOCAL_STRINGS.missing_number[req.session.language]%>';
          }
          if (SLGetNumberCharsOccur(sPassword, '~!@#$%^&*()-_?/+[]{}`=:.;') == 0) {
            sMessage += '<br>* <%=LOCAL_STRINGS.missing_special_character[req.session.language]%>';
          }
          sMessage = sMessage.substr(6);
          txtPassword.CustomErrorMessage(sMessage);
          resolve(sPassword);
        } catch (err) {
          reject(err);
        }
      });
    });
    const btnShowPassword = document.getElementById('btnShowPassword')
    btnShowPassword.addEventListener('click', () => {
      if (txtPassword.element.type === 'password') {
        txtPassword.element.type = 'text'
      } else {
        txtPassword.element.type = 'password'
      }
    })
    const grpGender = new SLRadioGroup('grpGender', {
      messages: {
        msgDiv: 'msgGender',
        show: showMsg,
        hide: hideMsg
      },
      required: '<%=LOCAL_STRINGS.required_gender[req.session.language]%>'
    });
    const txtDateOfBirth = new SLInput('txtDateOfBirth', {
      messages: {
        msgDiv: 'msgDateOfBirth',
        show: showMsg,
        hide: hideMsg
      },
      required: '<%=LOCAL_STRINGS.required_date_of_birth[req.session.language]%>',
      date: {
        error: '<%=LOCAL_STRINGS.date_of_birth_error[req.session.language]%>',
        format: '<%=req.session.date_format%>',
        separator: '<%=req.session.date_separator%>'
      },
      less_to_today: {
        error: '<%=LOCAL_STRINGS.date_of_birth_must_be_less_to_today[req.session.language]%>'
      }
    });
    txtDateOfBirth.BlurAction(() => {
      try {
        let sDateOfBirth = txtDateOfBirth.element.value;
        txtDateOfBirth.CustomErrorMessage('');
        let oDateOfBirth = txtDateOfBirth.GetDate();
        console.log(oDateOfBirth.error)
        if (!oDateOfBirth.error) {
          sDateOfBirth = oDateOfBirth.date;
          const fDifference = SLTodaySimpleDifference(sDateOfBirth, 'to', '<%=req.session.date_format%>',
            '<%=req.session.date_separator%>', 'y', 'none');
          console.log(fDifference)
          if (fDifference < 18.0) {
            txtDateOfBirth.CustomErrorMessage('<%=LOCAL_STRINGS.you_must_be_at_least_18_years_old[req.session.language]%>');
          } else if (fDifference >= 100.0) {
            txtDateOfBirth.CustomErrorMessage('<%=LOCAL_STRINGS.you_are_unlikely_older_100_years[req.session.language]%>');
          }
        }
      } catch (err) {
      }
      return txtDateOfBirth.element.value
    });
    const chbAgree = new SLCheckBox('chbAgree', {
      messages: {
        msgDiv: 'msgAgree',
        show: showMsg,
        hide: hideMsg
      },
      required: '<%=LOCAL_STRINGS.registration_required_agree[req.session.language]%>'
    });
    txtEmail.element.addEventListener('keyup', async () => {
      if (txtEmail.element.value.length > 0 ) {
        await txtEmail.SetProperty('required', '<%=LOCAL_STRINGS.required_email[req.session.language]%>')
        const iPositionElementEmail = aoElements.indexOf(txtEmail);
        if (iPositionElementEmail < 0 ) {
          aoElements.push(txtEmail)
        }
      } else {
        await txtEmail.SetProperty('required', null)
        aoElements.removeByValue(txtEmail);
      }
      if (txtEmail.element.value.length === 0 && txtCellPhone.element.value.length === 0 ) {
        hid_email_phone.value = '0'
      } else {
        hid_email_phone.value = '1'
      }
    })
    txtCellPhone.element.addEventListener('keyup', async () => {
      if (txtCellPhone.element.value.length > 0 ) {
        await txtCellPhone.SetProperty('required', '<%=LOCAL_STRINGS.required_cell_phone[req.session.language]%>')
        const iPositionElementPhone = aoElements.indexOf(txtCellPhone);
        if (iPositionElementPhone < 0 ) {
          aoElements.push(txtCellPhone)
        }
      } else {
        await txtCellPhone.SetProperty('required', null)
        aoElements.removeByValue(txtCellPhone);
      }
      if (txtEmail.element.value.length === 0 && txtCellPhone.element.value.length === 0 ) {
        hid_email_phone.value = '0'
      } else {
        hid_email_phone.value = '1'
      }
    })
    const aoElements = [  txtFirstName, txtLastName, txtUserName, txtEmail, selCountriesOfResidence, txtCellPhone,
                          txtPassword,  grpGender, txtDateOfBirth, selNationality, selDoctrine, chbAgree ];
    const frmMain = document.getElementById('frmMain')
    const icoSignUp = document.getElementById('icoSignUp')
    const btnSignUp = new SLButton('btnSignUp', {
    })
    btnSignUp.element.addEventListener('click', async () => {
      try {
        if( hid_email_phone.value === '1' ) {
          var bValid = await SLAreValidElements(aoElements)
          if (bValid) {
            var oSel = document.getElementById("selDoctrine");
            var sText= oSel.options[oSel.selectedIndex].text;
            hid_doctrine.value = sText;
            icoSignUp.classList.remove('d-none')
            var oFormData = new FormData(frmMain)
            const oFetch = await fetch('/profile/sign-up', {
                method: 'POST',
                body: oFormData
            })
            console.log('ya registro los datos desde el front end sign-up')
            let oValue = await oFetch.json();
            console.log('code:' + oValue.message.code)
            if (oValue.message.code == 'completed_operation') {
              Swal.fire({
                title: '<%=LOCAL_STRINGS.successful_registration[req.session.language]%>',
                text: '<%=LOCAL_STRINGS.validation_information_email[req.session.language]%>',
                icon: 'success',
                confirmButtonText: '<%=LOCAL_STRINGS.ok[req.session.language]%>',
                width: 'auto',
                allowOutsideClick: false,
                allowEscapeKey: false
              }).then((bAction) => {
                window.location.replace('/profile/login');
                return;
              });
            } else {
              Swal.fire({
                title: oValue.message['<%=req.session.language%>'],
                text: '',
                icon: 'error',
                confirmButtonText: '<%=LOCAL_STRINGS.ok[req.session.language]%>',
                width: 'auto',
                allowOutsideClick: false,
                allowEscapeKey: false
              }).then((bAction) => {
                icoSignUp.classList.add('d-none');
                return;
              });
            }
          }
        } else {
          Swal.fire({
            title: '<%=LOCAL_STRINGS.registration_required_email_phone[req.session.language]%>',
            text: '',
            icon: 'error',
            confirmButtonText: '<%=LOCAL_STRINGS.ok[req.session.language]%>',
            width: 'auto',
            allowOutsideClick: false,
            allowEscapeKey: false
          }).then((bAction) => {
            icoSignUp.classList.add('d-none');
            return;
          });
        }
      } catch(err) {
        console.error(err);
      }
    })
  </script>
<!--  END *** SCRIPTS ***  -->
</body>
</html>
